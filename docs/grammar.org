* Grammar
#+BEGIN_SRC
lang -> stmt *
stmt -> bool_stmt | arith_stmt | func_stmt | while
arith_stmt -> IDENT ASSIGN arith_expr SEMICOLON
bool_stmt -> IDENT ASSIGN bool_expr SEMICOLON
func_stmt -> func L_B func_args R_B SEMICOLON
func_args = arith_expr | bool_expr
func = PRINT

expr -> arith_expr | bool_expr

arith_expr -> hash_map | NUM | IDENT | arith_expr arith_op arith_expr
arith_op -> ADD | SUB | MUL | DIV | MOD

compar_expr -> arith_expr arith_expr compar_op
compar_op -> GT | GE | EQ | LE | LT

bool_expr -> compar_expr | bool_expr bool_bin_op bool_expr | bool_un_op bool_expr
bool_bin_op -> AND | OR
bool_un_op -> NOT

while -> WHILE bool_expr L_CB while_body R_CB
while_body -> lang

if -> IF bool_expr L_CB if_body L_CB
if_body -> lang R_CB

list_stmt -> IDENT ASSIGN LIST L_P R_P SEMICOLON
push_stmt -> PUSH_KW IDENT L_P arith_expr R_P SEMICOLON
get_expr -> GET_KW IDENT L_P arith_expr R_P
delete_stmt -> DELETE_KW IDENT L_P arith_expr R_P SEMICOLON

hash_map -> IDENT L_SB arith_expr R_SB
hash_map_assign_stmt -> hash_map ASSIGN_OP arith_expr SEMICOLON

LIST_KW -> list
PUSH_KW -> push
GET_KW -> get
REMOVE_KW -> remove

IF_KW -> if
WHILE_KW -> while
L_CB -> {
R_CB -> }
ASSIGN -> =

ADD -> +
SUB -> -
MUL -> *
MOD -> %

AND -> &&
OR -> ||
XOR -> ^^
NOT -> !

GR -> >
GE -> >=
EQ -> ==
LE -> <=
LS -> <

SEMICOLON -> ;
PRINT -> print
IDENT -> ^[A-Za-z]+[A-Za-z0-9]*$
NUM -> ^0$|^([1-9][0-9]*)$
#+END_SRC
